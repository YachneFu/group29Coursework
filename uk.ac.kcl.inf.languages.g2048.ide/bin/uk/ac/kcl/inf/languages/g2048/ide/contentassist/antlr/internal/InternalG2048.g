/*
 * generated by Xtext 2.24.0
 */
grammar InternalG2048;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package uk.ac.kcl.inf.languages.g2048.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.languages.g2048.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import uk.ac.kcl.inf.languages.g2048.services.G2048GrammarAccess;

}
@parser::members {
	private G2048GrammarAccess grammarAccess;

	public void setGrammarAccess(G2048GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleG2048Program
entryRuleG2048Program
:
{ before(grammarAccess.getG2048ProgramRule()); }
	 ruleG2048Program
{ after(grammarAccess.getG2048ProgramRule()); } 
	 EOF 
;

// Rule G2048Program
ruleG2048Program 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getG2048ProgramAccess().getStatementsAssignment()); }
		(rule__G2048Program__StatementsAssignment)*
		{ after(grammarAccess.getG2048ProgramAccess().getStatementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTitleDefineStatement
entryRuleTitleDefineStatement
:
{ before(grammarAccess.getTitleDefineStatementRule()); }
	 ruleTitleDefineStatement
{ after(grammarAccess.getTitleDefineStatementRule()); } 
	 EOF 
;

// Rule TitleDefineStatement
ruleTitleDefineStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTitleDefineStatementAccess().getGroup()); }
		(rule__TitleDefineStatement__Group__0)
		{ after(grammarAccess.getTitleDefineStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSizeDefineStatement
entryRuleSizeDefineStatement
:
{ before(grammarAccess.getSizeDefineStatementRule()); }
	 ruleSizeDefineStatement
{ after(grammarAccess.getSizeDefineStatementRule()); } 
	 EOF 
;

// Rule SizeDefineStatement
ruleSizeDefineStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSizeDefineStatementAccess().getGroup()); }
		(rule__SizeDefineStatement__Group__0)
		{ after(grammarAccess.getSizeDefineStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLevelDefineStatement
entryRuleLevelDefineStatement
:
{ before(grammarAccess.getLevelDefineStatementRule()); }
	 ruleLevelDefineStatement
{ after(grammarAccess.getLevelDefineStatementRule()); } 
	 EOF 
;

// Rule LevelDefineStatement
ruleLevelDefineStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLevelDefineStatementAccess().getGroup()); }
		(rule__LevelDefineStatement__Group__0)
		{ after(grammarAccess.getLevelDefineStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Level
ruleLevel
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLevelAccess().getAlternatives()); }
		(rule__Level__Alternatives)
		{ after(grammarAccess.getLevelAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getSizeDefineStatementParserRuleCall_0()); }
		ruleSizeDefineStatement
		{ after(grammarAccess.getStatementAccess().getSizeDefineStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getLevelDefineStatementParserRuleCall_1()); }
		ruleLevelDefineStatement
		{ after(grammarAccess.getStatementAccess().getLevelDefineStatementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getTitleDefineStatementParserRuleCall_2()); }
		ruleTitleDefineStatement
		{ after(grammarAccess.getStatementAccess().getTitleDefineStatementParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Level__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLevelAccess().getOneEnumLiteralDeclaration_0()); }
		('one')
		{ after(grammarAccess.getLevelAccess().getOneEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getLevelAccess().getTwoEnumLiteralDeclaration_1()); }
		('two')
		{ after(grammarAccess.getLevelAccess().getTwoEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getLevelAccess().getThreeEnumLiteralDeclaration_2()); }
		('three')
		{ after(grammarAccess.getLevelAccess().getThreeEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getLevelAccess().getFourEnumLiteralDeclaration_3()); }
		('four')
		{ after(grammarAccess.getLevelAccess().getFourEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getLevelAccess().getFiveEnumLiteralDeclaration_4()); }
		('five')
		{ after(grammarAccess.getLevelAccess().getFiveEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getLevelAccess().getSixEnumLiteralDeclaration_5()); }
		('six')
		{ after(grammarAccess.getLevelAccess().getSixEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getLevelAccess().getSevenEnumLiteralDeclaration_6()); }
		('seven')
		{ after(grammarAccess.getLevelAccess().getSevenEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getLevelAccess().getEightEnumLiteralDeclaration_7()); }
		('eight')
		{ after(grammarAccess.getLevelAccess().getEightEnumLiteralDeclaration_7()); }
	)
	|
	(
		{ before(grammarAccess.getLevelAccess().getNineEnumLiteralDeclaration_8()); }
		('nine')
		{ after(grammarAccess.getLevelAccess().getNineEnumLiteralDeclaration_8()); }
	)
	|
	(
		{ before(grammarAccess.getLevelAccess().getTenEnumLiteralDeclaration_9()); }
		('ten')
		{ after(grammarAccess.getLevelAccess().getTenEnumLiteralDeclaration_9()); }
	)
	|
	(
		{ before(grammarAccess.getLevelAccess().getElevenEnumLiteralDeclaration_10()); }
		('eleven')
		{ after(grammarAccess.getLevelAccess().getElevenEnumLiteralDeclaration_10()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TitleDefineStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TitleDefineStatement__Group__0__Impl
	rule__TitleDefineStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TitleDefineStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTitleDefineStatementAccess().getTitleKeyword_0()); }
	'title'
	{ after(grammarAccess.getTitleDefineStatementAccess().getTitleKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TitleDefineStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TitleDefineStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TitleDefineStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTitleDefineStatementAccess().getTitleAssignment_1()); }
	(rule__TitleDefineStatement__TitleAssignment_1)
	{ after(grammarAccess.getTitleDefineStatementAccess().getTitleAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SizeDefineStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SizeDefineStatement__Group__0__Impl
	rule__SizeDefineStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SizeDefineStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSizeDefineStatementAccess().getSizeKeyword_0()); }
	'size'
	{ after(grammarAccess.getSizeDefineStatementAccess().getSizeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SizeDefineStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SizeDefineStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SizeDefineStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSizeDefineStatementAccess().getSizeAssignment_1()); }
	(rule__SizeDefineStatement__SizeAssignment_1)
	{ after(grammarAccess.getSizeDefineStatementAccess().getSizeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LevelDefineStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LevelDefineStatement__Group__0__Impl
	rule__LevelDefineStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LevelDefineStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLevelDefineStatementAccess().getLevelKeyword_0()); }
	'level'
	{ after(grammarAccess.getLevelDefineStatementAccess().getLevelKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LevelDefineStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LevelDefineStatement__Group__1__Impl
	rule__LevelDefineStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LevelDefineStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLevelDefineStatementAccess().getLevelAssignment_1()); }
	(rule__LevelDefineStatement__LevelAssignment_1)
	{ after(grammarAccess.getLevelDefineStatementAccess().getLevelAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LevelDefineStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LevelDefineStatement__Group__2__Impl
	rule__LevelDefineStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LevelDefineStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLevelDefineStatementAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getLevelDefineStatementAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LevelDefineStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LevelDefineStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LevelDefineStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLevelDefineStatementAccess().getElementAssignment_3()); }
	(rule__LevelDefineStatement__ElementAssignment_3)
	{ after(grammarAccess.getLevelDefineStatementAccess().getElementAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__G2048Program__StatementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getG2048ProgramAccess().getStatementsStatementParserRuleCall_0()); }
		ruleStatement
		{ after(grammarAccess.getG2048ProgramAccess().getStatementsStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TitleDefineStatement__TitleAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTitleDefineStatementAccess().getTitleSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getTitleDefineStatementAccess().getTitleSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SizeDefineStatement__SizeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSizeDefineStatementAccess().getSizeINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getSizeDefineStatementAccess().getSizeINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LevelDefineStatement__LevelAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLevelDefineStatementAccess().getLevelLevelEnumRuleCall_1_0()); }
		ruleLevel
		{ after(grammarAccess.getLevelDefineStatementAccess().getLevelLevelEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LevelDefineStatement__ElementAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLevelDefineStatementAccess().getElementSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getLevelDefineStatementAccess().getElementSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

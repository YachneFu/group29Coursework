/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.languages.g2048.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class G2048GrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class G2048ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.g2048.G2048.G2048Program");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//G2048Program:
		//	statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.g2048.G2048.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSizeDefineStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLevelDefineStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTitleDefineStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Statement:
		//	SizeDefineStatement | LevelDefineStatement | TitleDefineStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//SizeDefineStatement | LevelDefineStatement | TitleDefineStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SizeDefineStatement
		public RuleCall getSizeDefineStatementParserRuleCall_0() { return cSizeDefineStatementParserRuleCall_0; }
		
		//LevelDefineStatement
		public RuleCall getLevelDefineStatementParserRuleCall_1() { return cLevelDefineStatementParserRuleCall_1; }
		
		//TitleDefineStatement
		public RuleCall getTitleDefineStatementParserRuleCall_2() { return cTitleDefineStatementParserRuleCall_2; }
	}
	public class TitleDefineStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.g2048.G2048.TitleDefineStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTitleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		
		//TitleDefineStatement:
		//	"title" title=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"title" title=STRING
		public Group getGroup() { return cGroup; }
		
		//"title"
		public Keyword getTitleKeyword_0() { return cTitleKeyword_0; }
		
		//title=STRING
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_1_0() { return cTitleSTRINGTerminalRuleCall_1_0; }
	}
	public class SizeDefineStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.g2048.G2048.SizeDefineStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSizeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSizeINTTerminalRuleCall_1_0 = (RuleCall)cSizeAssignment_1.eContents().get(0);
		
		//SizeDefineStatement:
		//	"size" size=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//"size" size=INT
		public Group getGroup() { return cGroup; }
		
		//"size"
		public Keyword getSizeKeyword_0() { return cSizeKeyword_0; }
		
		//size=INT
		public Assignment getSizeAssignment_1() { return cSizeAssignment_1; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_1_0() { return cSizeINTTerminalRuleCall_1_0; }
	}
	public class LevelDefineStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.g2048.G2048.LevelDefineStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLevelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLevelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLevelLevelEnumRuleCall_1_0 = (RuleCall)cLevelAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementSTRINGTerminalRuleCall_3_0 = (RuleCall)cElementAssignment_3.eContents().get(0);
		
		//LevelDefineStatement:
		//	"level" level=Level ":" element=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"level" level=Level ":" element=STRING
		public Group getGroup() { return cGroup; }
		
		//"level"
		public Keyword getLevelKeyword_0() { return cLevelKeyword_0; }
		
		//level=Level
		public Assignment getLevelAssignment_1() { return cLevelAssignment_1; }
		
		//Level
		public RuleCall getLevelLevelEnumRuleCall_1_0() { return cLevelLevelEnumRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//element=STRING
		public Assignment getElementAssignment_3() { return cElementAssignment_3; }
		
		//STRING
		public RuleCall getElementSTRINGTerminalRuleCall_3_0() { return cElementSTRINGTerminalRuleCall_3_0; }
	}
	
	public class LevelElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.g2048.G2048.Level");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOneOneKeyword_0_0 = (Keyword)cOneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTwoEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTwoTwoKeyword_1_0 = (Keyword)cTwoEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cThreeEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cThreeThreeKeyword_2_0 = (Keyword)cThreeEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFourEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFourFourKeyword_3_0 = (Keyword)cFourEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFiveEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFiveFiveKeyword_4_0 = (Keyword)cFiveEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSixEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSixSixKeyword_5_0 = (Keyword)cSixEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSevenEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSevenSevenKeyword_6_0 = (Keyword)cSevenEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cEightEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cEightEightKeyword_7_0 = (Keyword)cEightEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cNineEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cNineNineKeyword_8_0 = (Keyword)cNineEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cTenEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cTenTenKeyword_9_0 = (Keyword)cTenEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cElevenEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cElevenElevenKeyword_10_0 = (Keyword)cElevenEnumLiteralDeclaration_10.eContents().get(0);
		
		//enum Level:
		//	one | two | three | four | five | six | seven | eight | nine | ten | eleven;
		public EnumRule getRule() { return rule; }
		
		//one | two | three | four | five | six | seven | eight | nine | ten | eleven
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//one
		public EnumLiteralDeclaration getOneEnumLiteralDeclaration_0() { return cOneEnumLiteralDeclaration_0; }
		
		//"one"
		public Keyword getOneOneKeyword_0_0() { return cOneOneKeyword_0_0; }
		
		//two
		public EnumLiteralDeclaration getTwoEnumLiteralDeclaration_1() { return cTwoEnumLiteralDeclaration_1; }
		
		//"two"
		public Keyword getTwoTwoKeyword_1_0() { return cTwoTwoKeyword_1_0; }
		
		//three
		public EnumLiteralDeclaration getThreeEnumLiteralDeclaration_2() { return cThreeEnumLiteralDeclaration_2; }
		
		//"three"
		public Keyword getThreeThreeKeyword_2_0() { return cThreeThreeKeyword_2_0; }
		
		//four
		public EnumLiteralDeclaration getFourEnumLiteralDeclaration_3() { return cFourEnumLiteralDeclaration_3; }
		
		//"four"
		public Keyword getFourFourKeyword_3_0() { return cFourFourKeyword_3_0; }
		
		//five
		public EnumLiteralDeclaration getFiveEnumLiteralDeclaration_4() { return cFiveEnumLiteralDeclaration_4; }
		
		//"five"
		public Keyword getFiveFiveKeyword_4_0() { return cFiveFiveKeyword_4_0; }
		
		//six
		public EnumLiteralDeclaration getSixEnumLiteralDeclaration_5() { return cSixEnumLiteralDeclaration_5; }
		
		//"six"
		public Keyword getSixSixKeyword_5_0() { return cSixSixKeyword_5_0; }
		
		//seven
		public EnumLiteralDeclaration getSevenEnumLiteralDeclaration_6() { return cSevenEnumLiteralDeclaration_6; }
		
		//"seven"
		public Keyword getSevenSevenKeyword_6_0() { return cSevenSevenKeyword_6_0; }
		
		//eight
		public EnumLiteralDeclaration getEightEnumLiteralDeclaration_7() { return cEightEnumLiteralDeclaration_7; }
		
		//"eight"
		public Keyword getEightEightKeyword_7_0() { return cEightEightKeyword_7_0; }
		
		//nine
		public EnumLiteralDeclaration getNineEnumLiteralDeclaration_8() { return cNineEnumLiteralDeclaration_8; }
		
		//"nine"
		public Keyword getNineNineKeyword_8_0() { return cNineNineKeyword_8_0; }
		
		//ten
		public EnumLiteralDeclaration getTenEnumLiteralDeclaration_9() { return cTenEnumLiteralDeclaration_9; }
		
		//"ten"
		public Keyword getTenTenKeyword_9_0() { return cTenTenKeyword_9_0; }
		
		//eleven
		public EnumLiteralDeclaration getElevenEnumLiteralDeclaration_10() { return cElevenEnumLiteralDeclaration_10; }
		
		//"eleven"
		public Keyword getElevenElevenKeyword_10_0() { return cElevenElevenKeyword_10_0; }
	}
	
	private final G2048ProgramElements pG2048Program;
	private final StatementElements pStatement;
	private final TitleDefineStatementElements pTitleDefineStatement;
	private final SizeDefineStatementElements pSizeDefineStatement;
	private final LevelDefineStatementElements pLevelDefineStatement;
	private final LevelElements eLevel;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public G2048GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pG2048Program = new G2048ProgramElements();
		this.pStatement = new StatementElements();
		this.pTitleDefineStatement = new TitleDefineStatementElements();
		this.pSizeDefineStatement = new SizeDefineStatementElements();
		this.pLevelDefineStatement = new LevelDefineStatementElements();
		this.eLevel = new LevelElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.languages.g2048.G2048".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//G2048Program:
	//	statements+=Statement*;
	public G2048ProgramElements getG2048ProgramAccess() {
		return pG2048Program;
	}
	
	public ParserRule getG2048ProgramRule() {
		return getG2048ProgramAccess().getRule();
	}
	
	//Statement:
	//	SizeDefineStatement | LevelDefineStatement | TitleDefineStatement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//TitleDefineStatement:
	//	"title" title=STRING;
	public TitleDefineStatementElements getTitleDefineStatementAccess() {
		return pTitleDefineStatement;
	}
	
	public ParserRule getTitleDefineStatementRule() {
		return getTitleDefineStatementAccess().getRule();
	}
	
	//SizeDefineStatement:
	//	"size" size=INT;
	public SizeDefineStatementElements getSizeDefineStatementAccess() {
		return pSizeDefineStatement;
	}
	
	public ParserRule getSizeDefineStatementRule() {
		return getSizeDefineStatementAccess().getRule();
	}
	
	//LevelDefineStatement:
	//	"level" level=Level ":" element=STRING;
	public LevelDefineStatementElements getLevelDefineStatementAccess() {
		return pLevelDefineStatement;
	}
	
	public ParserRule getLevelDefineStatementRule() {
		return getLevelDefineStatementAccess().getRule();
	}
	
	//enum Level:
	//	one | two | three | four | five | six | seven | eight | nine | ten | eleven;
	public LevelElements getLevelAccess() {
		return eLevel;
	}
	
	public EnumRule getLevelRule() {
		return getLevelAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.languages.g2048.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uk.ac.kcl.inf.languages.g2048.g2048.G2048Package;
import uk.ac.kcl.inf.languages.g2048.g2048.G2048Program;
import uk.ac.kcl.inf.languages.g2048.g2048.LevelDefineStatement;
import uk.ac.kcl.inf.languages.g2048.g2048.SizeDefineStatement;
import uk.ac.kcl.inf.languages.g2048.g2048.TitleDefineStatement;
import uk.ac.kcl.inf.languages.g2048.services.G2048GrammarAccess;

@SuppressWarnings("all")
public class G2048SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private G2048GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == G2048Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case G2048Package.G2048_PROGRAM:
				sequence_G2048Program(context, (G2048Program) semanticObject); 
				return; 
			case G2048Package.LEVEL_DEFINE_STATEMENT:
				sequence_LevelDefineStatement(context, (LevelDefineStatement) semanticObject); 
				return; 
			case G2048Package.SIZE_DEFINE_STATEMENT:
				sequence_SizeDefineStatement(context, (SizeDefineStatement) semanticObject); 
				return; 
			case G2048Package.TITLE_DEFINE_STATEMENT:
				sequence_TitleDefineStatement(context, (TitleDefineStatement) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     G2048Program returns G2048Program
	 *
	 * Constraint:
	 *     statements+=Statement+
	 */
	protected void sequence_G2048Program(ISerializationContext context, G2048Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns LevelDefineStatement
	 *     LevelDefineStatement returns LevelDefineStatement
	 *
	 * Constraint:
	 *     (level=Level element=STRING)
	 */
	protected void sequence_LevelDefineStatement(ISerializationContext context, LevelDefineStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, G2048Package.Literals.LEVEL_DEFINE_STATEMENT__LEVEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, G2048Package.Literals.LEVEL_DEFINE_STATEMENT__LEVEL));
			if (transientValues.isValueTransient(semanticObject, G2048Package.Literals.LEVEL_DEFINE_STATEMENT__ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, G2048Package.Literals.LEVEL_DEFINE_STATEMENT__ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLevelDefineStatementAccess().getLevelLevelEnumRuleCall_1_0(), semanticObject.getLevel());
		feeder.accept(grammarAccess.getLevelDefineStatementAccess().getElementSTRINGTerminalRuleCall_3_0(), semanticObject.getElement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns SizeDefineStatement
	 *     SizeDefineStatement returns SizeDefineStatement
	 *
	 * Constraint:
	 *     size=INT
	 */
	protected void sequence_SizeDefineStatement(ISerializationContext context, SizeDefineStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, G2048Package.Literals.SIZE_DEFINE_STATEMENT__SIZE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, G2048Package.Literals.SIZE_DEFINE_STATEMENT__SIZE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSizeDefineStatementAccess().getSizeINTTerminalRuleCall_1_0(), semanticObject.getSize());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns TitleDefineStatement
	 *     TitleDefineStatement returns TitleDefineStatement
	 *
	 * Constraint:
	 *     title=STRING
	 */
	protected void sequence_TitleDefineStatement(ISerializationContext context, TitleDefineStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, G2048Package.Literals.TITLE_DEFINE_STATEMENT__TITLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, G2048Package.Literals.TITLE_DEFINE_STATEMENT__TITLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTitleDefineStatementAccess().getTitleSTRINGTerminalRuleCall_1_0(), semanticObject.getTitle());
		feeder.finish();
	}
	
	
}

/*
 * generated by Xtext 2.24.0
 */
grammar InternalG2048;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.kcl.inf.languages.g2048.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.languages.g2048.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.inf.languages.g2048.services.G2048GrammarAccess;

}

@parser::members {

 	private G2048GrammarAccess grammarAccess;

    public InternalG2048Parser(TokenStream input, G2048GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "G2048Program";
   	}

   	@Override
   	protected G2048GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleG2048Program
entryRuleG2048Program returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getG2048ProgramRule()); }
	iv_ruleG2048Program=ruleG2048Program
	{ $current=$iv_ruleG2048Program.current; }
	EOF;

// Rule G2048Program
ruleG2048Program returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getG2048ProgramAccess().getStatementsStatementParserRuleCall_0());
			}
			lv_statements_0_0=ruleStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getG2048ProgramRule());
				}
				add(
					$current,
					"statements",
					lv_statements_0_0,
					"uk.ac.kcl.inf.languages.g2048.G2048.Statement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSizeDefineStatementParserRuleCall_0());
		}
		this_SizeDefineStatement_0=ruleSizeDefineStatement
		{
			$current = $this_SizeDefineStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getLevelDefineStatementParserRuleCall_1());
		}
		this_LevelDefineStatement_1=ruleLevelDefineStatement
		{
			$current = $this_LevelDefineStatement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getTitleDefineStatementParserRuleCall_2());
		}
		this_TitleDefineStatement_2=ruleTitleDefineStatement
		{
			$current = $this_TitleDefineStatement_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTitleDefineStatement
entryRuleTitleDefineStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTitleDefineStatementRule()); }
	iv_ruleTitleDefineStatement=ruleTitleDefineStatement
	{ $current=$iv_ruleTitleDefineStatement.current; }
	EOF;

// Rule TitleDefineStatement
ruleTitleDefineStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='title'
		{
			newLeafNode(otherlv_0, grammarAccess.getTitleDefineStatementAccess().getTitleKeyword_0());
		}
		(
			(
				lv_title_1_0=RULE_STRING
				{
					newLeafNode(lv_title_1_0, grammarAccess.getTitleDefineStatementAccess().getTitleSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTitleDefineStatementRule());
					}
					setWithLastConsumed(
						$current,
						"title",
						lv_title_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleSizeDefineStatement
entryRuleSizeDefineStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSizeDefineStatementRule()); }
	iv_ruleSizeDefineStatement=ruleSizeDefineStatement
	{ $current=$iv_ruleSizeDefineStatement.current; }
	EOF;

// Rule SizeDefineStatement
ruleSizeDefineStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='size'
		{
			newLeafNode(otherlv_0, grammarAccess.getSizeDefineStatementAccess().getSizeKeyword_0());
		}
		(
			(
				lv_size_1_0=RULE_INT
				{
					newLeafNode(lv_size_1_0, grammarAccess.getSizeDefineStatementAccess().getSizeINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSizeDefineStatementRule());
					}
					setWithLastConsumed(
						$current,
						"size",
						lv_size_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleLevelDefineStatement
entryRuleLevelDefineStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLevelDefineStatementRule()); }
	iv_ruleLevelDefineStatement=ruleLevelDefineStatement
	{ $current=$iv_ruleLevelDefineStatement.current; }
	EOF;

// Rule LevelDefineStatement
ruleLevelDefineStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='level'
		{
			newLeafNode(otherlv_0, grammarAccess.getLevelDefineStatementAccess().getLevelKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLevelDefineStatementAccess().getLevelLevelEnumRuleCall_1_0());
				}
				lv_level_1_0=ruleLevel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLevelDefineStatementRule());
					}
					set(
						$current,
						"level",
						lv_level_1_0,
						"uk.ac.kcl.inf.languages.g2048.G2048.Level");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getLevelDefineStatementAccess().getColonKeyword_2());
		}
		(
			(
				lv_element_3_0=RULE_STRING
				{
					newLeafNode(lv_element_3_0, grammarAccess.getLevelDefineStatementAccess().getElementSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLevelDefineStatementRule());
					}
					setWithLastConsumed(
						$current,
						"element",
						lv_element_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Rule Level
ruleLevel returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='one'
			{
				$current = grammarAccess.getLevelAccess().getOneEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getLevelAccess().getOneEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='two'
			{
				$current = grammarAccess.getLevelAccess().getTwoEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getLevelAccess().getTwoEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='three'
			{
				$current = grammarAccess.getLevelAccess().getThreeEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getLevelAccess().getThreeEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='four'
			{
				$current = grammarAccess.getLevelAccess().getFourEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getLevelAccess().getFourEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='five'
			{
				$current = grammarAccess.getLevelAccess().getFiveEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getLevelAccess().getFiveEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='six'
			{
				$current = grammarAccess.getLevelAccess().getSixEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getLevelAccess().getSixEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='seven'
			{
				$current = grammarAccess.getLevelAccess().getSevenEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getLevelAccess().getSevenEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='eight'
			{
				$current = grammarAccess.getLevelAccess().getEightEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getLevelAccess().getEightEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='nine'
			{
				$current = grammarAccess.getLevelAccess().getNineEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getLevelAccess().getNineEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='ten'
			{
				$current = grammarAccess.getLevelAccess().getTenEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getLevelAccess().getTenEnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='eleven'
			{
				$current = grammarAccess.getLevelAccess().getElevenEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getLevelAccess().getElevenEnumLiteralDeclaration_10());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

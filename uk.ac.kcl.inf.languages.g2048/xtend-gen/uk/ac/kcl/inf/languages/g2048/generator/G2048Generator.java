/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.languages.g2048.generator;

import java.util.Arrays;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import uk.ac.kcl.inf.languages.g2048.g2048.G2048Program;
import uk.ac.kcl.inf.languages.g2048.g2048.Level;
import uk.ac.kcl.inf.languages.g2048.g2048.LevelDefineStatement;
import uk.ac.kcl.inf.languages.g2048.g2048.SizeDefineStatement;
import uk.ac.kcl.inf.languages.g2048.g2048.Statement;
import uk.ac.kcl.inf.languages.g2048.g2048.TitleDefineStatement;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class G2048Generator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final G2048Program model = ((G2048Program) _head);
    final String className = this.deriveClassNameFor(resource);
    fsa.generateFile((className + ".java"), this.doGenerateClass(model, className));
  }
  
  public String deriveClassNameFor(final Resource resource) {
    String _xblockexpression = null;
    {
      final String origName = resource.getURI().lastSegment();
      String _firstUpper = StringExtensions.toFirstUpper(origName.substring(0, origName.indexOf(".")));
      _xblockexpression = (_firstUpper + "G2048");
    }
    return _xblockexpression;
  }
  
  public String doGenerateClass(final G2048Program program, final String className) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import uk.ac.kcl.inf.languages.g2048.library.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(className);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int topValue=0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String title=\"\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int mapsize=0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("HashMap<Integer, String> elements = new HashMap<Integer,String>();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("elements.put(0,\"\");");
    _builder.newLine();
    _builder.append("        ");
    final Function1<Statement, String> _function = (Statement it) -> {
      return this.generateJavaStatement(it);
    };
    String _join = IterableExtensions.join(ListExtensions.<Statement, String>map(program.getStatements(), _function), "\n");
    _builder.append(_join, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("new G2048Frame(title,mapsize,elements,topValue);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final Statement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final TitleDefineStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("title=\"");
    String _title = stmt.getTitle();
    _builder.append(_title);
    _builder.append("\";");
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final SizeDefineStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("mapsize=");
    int _size = stmt.getSize();
    _builder.append(_size);
    _builder.append(";");
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final LevelDefineStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("elements.put(");
    CharSequence _xifexpression = null;
    Level _level = stmt.getLevel();
    boolean _tripleEquals = (_level == Level.ONE);
    if (_tripleEquals) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("2,\"");
      String _element = stmt.getElement();
      _builder_1.append(_element);
      _builder_1.append("\");topValue=2;");
      _xifexpression = _builder_1;
    } else {
      CharSequence _xifexpression_1 = null;
      Level _level_1 = stmt.getLevel();
      boolean _tripleEquals_1 = (_level_1 == Level.TWO);
      if (_tripleEquals_1) {
        StringConcatenation _builder_2 = new StringConcatenation();
        _builder_2.append("4,\"");
        String _element_1 = stmt.getElement();
        _builder_2.append(_element_1);
        _builder_2.append("\");topValue=4;");
        _xifexpression_1 = _builder_2;
      } else {
        CharSequence _xifexpression_2 = null;
        Level _level_2 = stmt.getLevel();
        boolean _tripleEquals_2 = (_level_2 == Level.THREE);
        if (_tripleEquals_2) {
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("8,\"");
          String _element_2 = stmt.getElement();
          _builder_3.append(_element_2);
          _builder_3.append("\");topValue=8;");
          _xifexpression_2 = _builder_3;
        } else {
          CharSequence _xifexpression_3 = null;
          Level _level_3 = stmt.getLevel();
          boolean _tripleEquals_3 = (_level_3 == Level.FOUR);
          if (_tripleEquals_3) {
            StringConcatenation _builder_4 = new StringConcatenation();
            _builder_4.append("16,\"");
            String _element_3 = stmt.getElement();
            _builder_4.append(_element_3);
            _builder_4.append("\");topValue=16;");
            _xifexpression_3 = _builder_4;
          } else {
            CharSequence _xifexpression_4 = null;
            Level _level_4 = stmt.getLevel();
            boolean _tripleEquals_4 = (_level_4 == Level.FIVE);
            if (_tripleEquals_4) {
              StringConcatenation _builder_5 = new StringConcatenation();
              _builder_5.append("32,\"");
              String _element_4 = stmt.getElement();
              _builder_5.append(_element_4);
              _builder_5.append("\");topValue=32;");
              _xifexpression_4 = _builder_5;
            } else {
              CharSequence _xifexpression_5 = null;
              Level _level_5 = stmt.getLevel();
              boolean _tripleEquals_5 = (_level_5 == Level.SIX);
              if (_tripleEquals_5) {
                StringConcatenation _builder_6 = new StringConcatenation();
                _builder_6.append("64,\"");
                String _element_5 = stmt.getElement();
                _builder_6.append(_element_5);
                _builder_6.append("\");topValue=64;");
                _xifexpression_5 = _builder_6;
              } else {
                CharSequence _xifexpression_6 = null;
                Level _level_6 = stmt.getLevel();
                boolean _tripleEquals_6 = (_level_6 == Level.SEVEN);
                if (_tripleEquals_6) {
                  StringConcatenation _builder_7 = new StringConcatenation();
                  _builder_7.append("128,\"");
                  String _element_6 = stmt.getElement();
                  _builder_7.append(_element_6);
                  _builder_7.append("\");topValue=128;");
                  _xifexpression_6 = _builder_7;
                } else {
                  CharSequence _xifexpression_7 = null;
                  Level _level_7 = stmt.getLevel();
                  boolean _tripleEquals_7 = (_level_7 == Level.EIGHT);
                  if (_tripleEquals_7) {
                    StringConcatenation _builder_8 = new StringConcatenation();
                    _builder_8.append("256,\"");
                    String _element_7 = stmt.getElement();
                    _builder_8.append(_element_7);
                    _builder_8.append("\");topValue=256;");
                    _xifexpression_7 = _builder_8;
                  } else {
                    CharSequence _xifexpression_8 = null;
                    Level _level_8 = stmt.getLevel();
                    boolean _tripleEquals_8 = (_level_8 == Level.NINE);
                    if (_tripleEquals_8) {
                      StringConcatenation _builder_9 = new StringConcatenation();
                      _builder_9.append("512,\"");
                      String _element_8 = stmt.getElement();
                      _builder_9.append(_element_8);
                      _builder_9.append("\");topValue=512;");
                      _xifexpression_8 = _builder_9;
                    } else {
                      CharSequence _xifexpression_9 = null;
                      Level _level_9 = stmt.getLevel();
                      boolean _tripleEquals_9 = (_level_9 == Level.TEN);
                      if (_tripleEquals_9) {
                        StringConcatenation _builder_10 = new StringConcatenation();
                        _builder_10.append("1024,\"");
                        String _element_9 = stmt.getElement();
                        _builder_10.append(_element_9);
                        _builder_10.append("\");topValue=1024;");
                        _xifexpression_9 = _builder_10;
                      } else {
                        CharSequence _xifexpression_10 = null;
                        Level _level_10 = stmt.getLevel();
                        boolean _tripleEquals_10 = (_level_10 == Level.ELEVEN);
                        if (_tripleEquals_10) {
                          StringConcatenation _builder_11 = new StringConcatenation();
                          _builder_11.append("2048,\"");
                          String _element_10 = stmt.getElement();
                          _builder_11.append(_element_10);
                          _builder_11.append("\");topValue=2048;");
                          _xifexpression_10 = _builder_11;
                        }
                        _xifexpression_9 = _xifexpression_10;
                      }
                      _xifexpression_8 = _xifexpression_9;
                    }
                    _xifexpression_7 = _xifexpression_8;
                  }
                  _xifexpression_6 = _xifexpression_7;
                }
                _xifexpression_5 = _xifexpression_6;
              }
              _xifexpression_4 = _xifexpression_5;
            }
            _xifexpression_3 = _xifexpression_4;
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    _builder.append(_xifexpression);
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String generateJavaStatement(final Statement stmt) {
    if (stmt instanceof LevelDefineStatement) {
      return _generateJavaStatement((LevelDefineStatement)stmt);
    } else if (stmt instanceof SizeDefineStatement) {
      return _generateJavaStatement((SizeDefineStatement)stmt);
    } else if (stmt instanceof TitleDefineStatement) {
      return _generateJavaStatement((TitleDefineStatement)stmt);
    } else if (stmt != null) {
      return _generateJavaStatement(stmt);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(stmt).toString());
    }
  }
}
